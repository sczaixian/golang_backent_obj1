

---------------------------总览-----------------------------

NFT 交易市场

不仅仅是一个基于区块链的应用
是连上链下技术高度结合
是的区块链 的去中心化、透明性、不可篡改这些特点与链下业务流程融合

灵活可扩展的系统

不仅仅是 NFT 市场，还能支持未来的连上潜在应用


技术架构通用性和可扩展
链上技术和链下服务相结合
去中心化应用的场景扩展





-----------------------DAO---------------------------------
DAO层位于​​分层架构的数据访问层​​，介于业务逻辑层（Service）与数据库之间
它抽象了数据操作细节，使业务逻辑无需关心数据如何存储或检索，仅通过接口调用DAO提供的方法
数据访问层​​的核心组件，负责封装所有与数据库或其他持久化存储的交互逻辑。
其核心目标是将业务逻辑与底层数据存储细节解耦，提升代码的可维护性、可测试性和灵活性


核心职责​​
1. ​​数据操作封装​​: 实现CRUD（增删查改）操作
2. ​​数据库连接管理​​: 负责数据库连接的建立、维护与释放（如通过*sql.DB管理连接池）。
3. ​​数据模型转换​​: 将数据库查询结果（如SQL行数据）转换为Go结构体（Model），供业务层使用。
        例如将SELECT结果映射到User结构体


核心优势与价值​​

1. ​​解耦业务与数据逻辑​​
    业务层（Service）仅依赖DAO接口而非具体数据库实现，
    更换数据库（如MySQL→PostgreSQL）时只需调整DAO实现，无需修改业务代码。

2. ​​提升可测试性​​
    通过接口抽象，可轻松创建Mock DAO（如内存模拟数据库），实现业务逻辑的单元测试，无需真实数据库。

3. ​​代码复用与维护​​
    数据访问逻辑集中管理，避免SQL语句分散在业务代码中，降低重复并简化维护。


// Service层调用DAO
func (s *UserService) CreateUser(user *model.User) error    

// 依赖注入
// 3. Service 层定义
type UserService struct {
    userDAO UserDAO // 依赖接口
}    
// 单元测试时可注入 Mock DAO，无需连接真实数据库
s := &UserService{userDAO:userDAO}  // 数据库改变的时候只需要换注入的 数据库 DAO 就行了
s.getUser(UserID)
