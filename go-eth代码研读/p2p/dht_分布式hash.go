

1. 传统的 查询中心化服务器
2. 分布式 查询，每个节点都会保存一部分信息

数据使用分片存储在不同的节点上（不同的节点可以保存相同的资源，不同节点相互之间是链接的（理论上））
好处是：1. 防止单点故障； 2. 能更好的网络传输提高吞吐量（切片资源存到多个节点上）

搜联查询： A -->  B(没有 返回它知道的节点)
          A -->  C
距离计算： peerId 和  PId 间的距离 使用 ip 异或，得到的距离就是他们间的距离
这个距离不是现实的距离而是存储内容的距离

Cid ： 内容id
peerid： 节点id
bucket num: 256
bucket size: 20 如果超出会采用淘汰机制，不经常用的淘汰掉


资源 hash 得到256（cid） ----  将hash值和 peerid（节点编号） 异或操作得到最小值是最有可能存在资源的节点

将距离我当前节点 不同的距离的节点 规划到不同的桶
桶号：  peerId 异或 的公共前缀 0 的个数，前缀0数量越多距离越近

方法：
1. findpeer： 查找节点
2. get、put value： 得到返回节点（get）， 发送节点让对方保存
3. add、get provider： 有某个资源后在网络广播 cid（add）、告诉我谁有这个cid（get provider）

swarm：对等网络