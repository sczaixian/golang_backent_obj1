



decode.go                        解码器，把RLP数据解码为go的数据结构
doc.go                                文档代码
encode.go                        编码器，把GO的数据结构序列化为字节数组
raw.go                                未解码的RLP数据
typecache.go                        类型缓存， 类型缓存记录了类型->(编码器|解码器)的内容。


以太坊中用于序列化和反序列化数据的一种关键编码方式

主要用于将结构化的数据转换为字节数组，以便于网络传输和持久化存储
序列化对象（如交易、区块状态等）的主要方法

序列化（编码）：将 Go 语言中的各种数据类型（如结构体、切片、数组、整数、字符串等）转换为符合 RLP 规范的字节序列。
反序列化（解码）：将 RLP 编码的字节序列还原为原始的 Go 数据类型。

不支持的类型：RLP 明确不支持编码有符号整数（如 int, int8 等）、浮点数、映射（map）、通道（channel）和函数



RLP 编码仅处理两种基本数据类型：

1. 字符串（String）​​：即字节数组（byte array）。
2. 列表（List）​​：由其他字符串或列表组成的序列，支持嵌套。



实现一个 不能被拷贝的类
“伪装”成了一个锁类型。因此，任何包含 noCopy 字段的结构体，也会被 -copylocks 检查器视为不应该被拷贝的类型。
type noCopy struct {}
func (*noCopy)Lock(){}
func (*noCopy)Unlock(){}

